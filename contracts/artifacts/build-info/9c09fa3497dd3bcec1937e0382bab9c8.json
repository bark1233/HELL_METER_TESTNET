{
	"id": "9c09fa3497dd3bcec1937e0382bab9c8",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.6.12",
	"solcLongVersion": "0.6.12+commit.27d51765",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/multiAccessUpgradeable.sol": {
				"content": "pragma solidity ^0.6.0;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\";\n\ncontract MultiAccessUpgradeable is Initializable {\n\n    // how about a master address that cannot be revoked?\n    mapping(address => bool) private access;\n\n    function initialize() public initializer {\n        access[msg.sender] = true;\n    }\n\n    function grantAccess(address to) public restricted {\n        access[to] = true;\n    }\n\n    function revokeAccess(address from) public restricted {\n        delete access[from];\n    }\n\n    modifier restricted() {\n        require(access[msg.sender] == true, \"Access denied\");\n        _;\n    }\n\n}"
			},
			"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\n// solhint-disable-next-line compiler-version\npragma solidity >=0.4.24 <0.8.0;\n\nimport \"../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n */\nabstract contract Initializable {\n\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        require(_initializing || _isConstructor() || !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n\n    /// @dev Returns true if and only if the function is running in the constructor\n    function _isConstructor() private view returns (bool) {\n        return !AddressUpgradeable.isContract(address(this));\n    }\n}\n"
			},
			"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol": {
				"Initializable": {
					"abi": [],
					"devdoc": {
						"details": "This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.",
						"kind": "dev",
						"methods": {},
						"stateVariables": {
							"_initialized": {
								"details": "Indicates that the contract has been initialized."
							},
							"_initializing": {
								"details": "Indicates that the contract is in the process of being initialized."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\",\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"_initialized\":{\"details\":\"Indicates that the contract has been initialized.\"},\"_initializing\":{\"details\":\"Indicates that the contract is in the process of being initialized.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":\"Initializable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":{\"keccak256\":\"0xd8e4eb08dcc1d1860fb347ba5ffd595242b9a1b66d49a47f2b4cb51c3f35017e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7dbc89479d30592e82442edc38053b380f611037a5e6ceafc7bf57a7aa1f0305\",\"dweb:/ipfs/QmcdYtt56WmjeYvsFjK69FnahnAriw88VzY3XRZwXkQKKN\"]},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0xfc5ea91fa9ceb1961023b2a6c978b902888c52b90847ac7813fe3b79524165f6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a6b81dcc816857a9d981386f6d8de49198420ee41cdc0ecade366ab412174d03\",\"dweb:/ipfs/QmV2vznMT6m9qo3pFMAWi3Nz3UDhwesgwFxeXe6Tod3v8A\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 6,
								"contract": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:Initializable",
								"label": "_initialized",
								"offset": 0,
								"slot": "0",
								"type": "t_bool"
							},
							{
								"astId": 9,
								"contract": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:Initializable",
								"label": "_initializing",
								"offset": 1,
								"slot": "0",
								"type": "t_bool"
							}
						],
						"types": {
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
				"AddressUpgradeable": {
					"abi": [],
					"devdoc": {
						"details": "Collection of functions related to the address type",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":134:6849  library AddressUpgradeable {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":134:6849  library AddressUpgradeable {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212204f5a7ef7b70a6866a64226e124d74a0bca07f1801f5d7a63f020065d3a94e57c64736f6c634300060c0033\n}\n",
						"bytecode": {
							"linkReferences": {},
							"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212204f5a7ef7b70a6866a64226e124d74a0bca07f1801f5d7a63f020065d3a94e57c64736f6c634300060c0033",
							"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x4F GAS PUSH31 0xF7B70A6866A64226E124D74A0BCA07F1801F5D7A63F020065D3A94E57C6473 PUSH16 0x6C634300060C00330000000000000000 ",
							"sourceMap": "134:6715:1:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212204f5a7ef7b70a6866a64226e124d74a0bca07f1801f5d7a63f020065d3a94e57c64736f6c634300060c0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x4F GAS PUSH31 0xF7B70A6866A64226E124D74A0BCA07F1801F5D7A63F020065D3A94E57C6473 PUSH16 0x6C634300060C00330000000000000000 ",
							"sourceMap": "134:6715:1:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"_verifyCallResult(bool,bytes memory,string memory)": "infinite",
								"functionCall(address,bytes memory)": "infinite",
								"functionCall(address,bytes memory,string memory)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256,string memory)": "infinite",
								"functionStaticCall(address,bytes memory)": "infinite",
								"functionStaticCall(address,bytes memory,string memory)": "infinite",
								"isContract(address)": "infinite",
								"sendValue(address payable,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 134,
									"end": 6849,
									"name": "PUSH #[$]",
									"source": 1,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 134,
									"end": 6849,
									"name": "PUSH [$]",
									"source": 1,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 134,
									"end": 6849,
									"name": "PUSH",
									"source": 1,
									"value": "B"
								},
								{
									"begin": 134,
									"end": 6849,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 134,
									"end": 6849,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 134,
									"end": 6849,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 134,
									"end": 6849,
									"name": "CODECOPY",
									"source": 1
								},
								{
									"begin": 134,
									"end": 6849,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 134,
									"end": 6849,
									"name": "MLOAD",
									"source": 1
								},
								{
									"begin": 134,
									"end": 6849,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 134,
									"end": 6849,
									"name": "BYTE",
									"source": 1
								},
								{
									"begin": 134,
									"end": 6849,
									"name": "PUSH",
									"source": 1,
									"value": "73"
								},
								{
									"begin": 134,
									"end": 6849,
									"name": "EQ",
									"source": 1
								},
								{
									"begin": 134,
									"end": 6849,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "1"
								},
								{
									"begin": 134,
									"end": 6849,
									"name": "JUMPI",
									"source": 1
								},
								{
									"begin": 134,
									"end": 6849,
									"name": "INVALID",
									"source": 1
								},
								{
									"begin": 134,
									"end": 6849,
									"name": "tag",
									"source": 1,
									"value": "1"
								},
								{
									"begin": 134,
									"end": 6849,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 134,
									"end": 6849,
									"name": "ADDRESS",
									"source": 1
								},
								{
									"begin": 134,
									"end": 6849,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 134,
									"end": 6849,
									"name": "MSTORE",
									"source": 1
								},
								{
									"begin": 134,
									"end": 6849,
									"name": "PUSH",
									"source": 1,
									"value": "73"
								},
								{
									"begin": 134,
									"end": 6849,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 134,
									"end": 6849,
									"name": "MSTORE8",
									"source": 1
								},
								{
									"begin": 134,
									"end": 6849,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 134,
									"end": 6849,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 134,
									"end": 6849,
									"name": "RETURN",
									"source": 1
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212204f5a7ef7b70a6866a64226e124d74a0bca07f1801f5d7a63f020065d3a94e57c64736f6c634300060c0033",
									".code": [
										{
											"begin": 134,
											"end": 6849,
											"name": "PUSHDEPLOYADDRESS",
											"source": 1
										},
										{
											"begin": 134,
											"end": 6849,
											"name": "ADDRESS",
											"source": 1
										},
										{
											"begin": 134,
											"end": 6849,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 134,
											"end": 6849,
											"name": "PUSH",
											"source": 1,
											"value": "80"
										},
										{
											"begin": 134,
											"end": 6849,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 134,
											"end": 6849,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 134,
											"end": 6849,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 134,
											"end": 6849,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 134,
											"end": 6849,
											"name": "REVERT",
											"source": 1
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":\"AddressUpgradeable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0xfc5ea91fa9ceb1961023b2a6c978b902888c52b90847ac7813fe3b79524165f6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a6b81dcc816857a9d981386f6d8de49198420ee41cdc0ecade366ab412174d03\",\"dweb:/ipfs/QmV2vznMT6m9qo3pFMAWi3Nz3UDhwesgwFxeXe6Tod3v8A\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/multiAccessUpgradeable.sol": {
				"MultiAccessUpgradeable": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								}
							],
							"name": "grantAccess",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "initialize",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								}
							],
							"name": "revokeAccess",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/multiAccessUpgradeable.sol\":96:637  contract MultiAccessUpgradeable is Initializable {... */\n  mstore(0x40, 0x80)\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/multiAccessUpgradeable.sol\":96:637  contract MultiAccessUpgradeable is Initializable {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x0ae5e739\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x8129fc1c\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x85e68531\n      eq\n      tag_5\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"contracts/multiAccessUpgradeable.sol\":345:430  function grantAccess(address to) public restricted {... */\n    tag_3:\n      tag_6\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x20\n      dup2\n      lt\n      iszero\n      tag_7\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_7:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_8\n      jump\t// in\n    tag_6:\n      stop\n        /* \"contracts/multiAccessUpgradeable.sol\":256:339  function initialize() public initializer {... */\n    tag_4:\n      tag_9\n      tag_10\n      jump\t// in\n    tag_9:\n      stop\n        /* \"contracts/multiAccessUpgradeable.sol\":436:526  function revokeAccess(address from) public restricted {... */\n    tag_5:\n      tag_11\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x20\n      dup2\n      lt\n      iszero\n      tag_12\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_12:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_13\n      jump\t// in\n    tag_11:\n      stop\n        /* \"contracts/multiAccessUpgradeable.sol\":345:430  function grantAccess(address to) public restricted {... */\n    tag_8:\n        /* \"contracts/multiAccessUpgradeable.sol\":594:598  true */\n      0x01\n        /* \"contracts/multiAccessUpgradeable.sol\":572:598  access[msg.sender] == true */\n      iszero\n      iszero\n        /* \"contracts/multiAccessUpgradeable.sol\":572:578  access */\n      0x01\n        /* \"contracts/multiAccessUpgradeable.sol\":572:590  access[msg.sender] */\n      0x00\n        /* \"contracts/multiAccessUpgradeable.sol\":579:589  msg.sender */\n      caller\n        /* \"contracts/multiAccessUpgradeable.sol\":572:590  access[msg.sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xff\n      and\n        /* \"contracts/multiAccessUpgradeable.sol\":572:598  access[msg.sender] == true */\n      iszero\n      iszero\n      eq\n        /* \"contracts/multiAccessUpgradeable.sol\":564:616  require(access[msg.sender] == true, \"Access denied\") */\n      tag_15\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x0d\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      0x4163636573732064656e69656400000000000000000000000000000000000000\n      dup2\n      mstore\n      pop\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_15:\n        /* \"contracts/multiAccessUpgradeable.sol\":419:423  true */\n      0x01\n        /* \"contracts/multiAccessUpgradeable.sol\":406:412  access */\n      dup1\n        /* \"contracts/multiAccessUpgradeable.sol\":406:416  access[to] */\n      0x00\n        /* \"contracts/multiAccessUpgradeable.sol\":413:415  to */\n      dup4\n        /* \"contracts/multiAccessUpgradeable.sol\":406:416  access[to] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n        /* \"contracts/multiAccessUpgradeable.sol\":406:423  access[to] = true */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xff\n      mul\n      not\n      and\n      swap1\n      dup4\n      iszero\n      iszero\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"contracts/multiAccessUpgradeable.sol\":345:430  function grantAccess(address to) public restricted {... */\n      pop\n      jump\t// out\n        /* \"contracts/multiAccessUpgradeable.sol\":256:339  function initialize() public initializer {... */\n    tag_10:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":1512:1525  _initializing */\n      0x00\n      0x01\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":1512:1545  _initializing || _isConstructor() */\n      dup1\n      tag_18\n      jumpi\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":1529:1545  _isConstructor() */\n      tag_19\n        /* \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":1529:1543  _isConstructor */\n      tag_20\n        /* \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":1529:1545  _isConstructor() */\n      jump\t// in\n    tag_19:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":1512:1545  _initializing || _isConstructor() */\n    tag_18:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":1512:1562  _initializing || _isConstructor() || !_initialized */\n      dup1\n      tag_21\n      jumpi\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":1550:1562  _initialized */\n      0x00\n      dup1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":1549:1562  !_initialized */\n      iszero\n        /* \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":1512:1562  _initializing || _isConstructor() || !_initialized */\n    tag_21:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":1504:1613  require(_initializing || _isConstructor() || !_initialized, \"Initializable: contract is already initialized\") */\n      tag_22\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x2e\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      data_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759\n      0x2e\n      swap2\n      codecopy\n      0x40\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_22:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":1624:1643  bool isTopLevelCall */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":1647:1660  _initializing */\n      dup1\n      0x01\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":1646:1660  !_initializing */\n      iszero\n        /* \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":1624:1660  bool isTopLevelCall = !_initializing */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":1674:1688  isTopLevelCall */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":1670:1768  if (isTopLevelCall) {... */\n      iszero\n      tag_23\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":1720:1724  true */\n      0x01\n        /* \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":1704:1717  _initializing */\n      0x00\n      0x01\n        /* \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":1704:1724  _initializing = true */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xff\n      mul\n      not\n      and\n      swap1\n      dup4\n      iszero\n      iszero\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":1753:1757  true */\n      0x01\n        /* \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":1738:1750  _initialized */\n      0x00\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":1738:1757  _initialized = true */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xff\n      mul\n      not\n      and\n      swap1\n      dup4\n      iszero\n      iszero\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":1670:1768  if (isTopLevelCall) {... */\n    tag_23:\n        /* \"contracts/multiAccessUpgradeable.sol\":328:332  true */\n      0x01\n        /* \"contracts/multiAccessUpgradeable.sol\":307:313  access */\n      dup1\n        /* \"contracts/multiAccessUpgradeable.sol\":307:325  access[msg.sender] */\n      0x00\n        /* \"contracts/multiAccessUpgradeable.sol\":314:324  msg.sender */\n      caller\n        /* \"contracts/multiAccessUpgradeable.sol\":307:325  access[msg.sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n        /* \"contracts/multiAccessUpgradeable.sol\":307:332  access[msg.sender] = true */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xff\n      mul\n      not\n      and\n      swap1\n      dup4\n      iszero\n      iszero\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":1794:1808  isTopLevelCall */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":1790:1856  if (isTopLevelCall) {... */\n      iszero\n      tag_25\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":1840:1845  false */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":1824:1837  _initializing */\n      dup1\n      0x01\n        /* \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":1824:1845  _initializing = false */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xff\n      mul\n      not\n      and\n      swap1\n      dup4\n      iszero\n      iszero\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":1790:1856  if (isTopLevelCall) {... */\n    tag_25:\n        /* \"contracts/multiAccessUpgradeable.sol\":256:339  function initialize() public initializer {... */\n      pop\n      jump\t// out\n        /* \"contracts/multiAccessUpgradeable.sol\":436:526  function revokeAccess(address from) public restricted {... */\n    tag_13:\n        /* \"contracts/multiAccessUpgradeable.sol\":594:598  true */\n      0x01\n        /* \"contracts/multiAccessUpgradeable.sol\":572:598  access[msg.sender] == true */\n      iszero\n      iszero\n        /* \"contracts/multiAccessUpgradeable.sol\":572:578  access */\n      0x01\n        /* \"contracts/multiAccessUpgradeable.sol\":572:590  access[msg.sender] */\n      0x00\n        /* \"contracts/multiAccessUpgradeable.sol\":579:589  msg.sender */\n      caller\n        /* \"contracts/multiAccessUpgradeable.sol\":572:590  access[msg.sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xff\n      and\n        /* \"contracts/multiAccessUpgradeable.sol\":572:598  access[msg.sender] == true */\n      iszero\n      iszero\n      eq\n        /* \"contracts/multiAccessUpgradeable.sol\":564:616  require(access[msg.sender] == true, \"Access denied\") */\n      tag_27\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x0d\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      0x4163636573732064656e69656400000000000000000000000000000000000000\n      dup2\n      mstore\n      pop\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_27:\n        /* \"contracts/multiAccessUpgradeable.sol\":507:513  access */\n      0x01\n        /* \"contracts/multiAccessUpgradeable.sol\":507:519  access[from] */\n      0x00\n        /* \"contracts/multiAccessUpgradeable.sol\":514:518  from */\n      dup3\n        /* \"contracts/multiAccessUpgradeable.sol\":507:519  access[from] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n        /* \"contracts/multiAccessUpgradeable.sol\":500:519  delete access[from] */\n      0x0100\n      exp\n      dup2\n      sload\n      swap1\n      0xff\n      mul\n      not\n      and\n      swap1\n      sstore\n        /* \"contracts/multiAccessUpgradeable.sol\":436:526  function revokeAccess(address from) public restricted {... */\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":1952:2075  function _isConstructor() private view returns (bool) {... */\n    tag_20:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":2000:2004  bool */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":2024:2068  AddressUpgradeable.isContract(address(this)) */\n      tag_30\n        /* \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":2062:2066  this */\n      address\n        /* \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":2024:2053  AddressUpgradeable.isContract */\n      tag_31\n        /* \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":2024:2068  AddressUpgradeable.isContract(address(this)) */\n      jump\t// in\n    tag_30:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":2023:2068  !AddressUpgradeable.isContract(address(this)) */\n      iszero\n        /* \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":2016:2068  return !AddressUpgradeable.isContract(address(this)) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":1952:2075  function _isConstructor() private view returns (bool) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":737:1150  function isContract(address account) internal view returns (bool) {... */\n    tag_31:\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":797:801  bool */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":1000:1012  uint256 size */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":1109:1116  account */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":1097:1117  extcodesize(account) */\n      extcodesize\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":1089:1117  size := extcodesize(account) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":1142:1143  0 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":1135:1139  size */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":1135:1143  size > 0 */\n      gt\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":1128:1143  return size > 0 */\n      swap2\n      pop\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":737:1150  function isContract(address account) internal view returns (bool) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n    stop\n    data_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759 496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564\n\n    auxdata: 0xa264697066735822122088ffac42f30d9b5914afdf539bfdd36df579164be29546e5d595525b2ec96d4564736f6c634300060c0033\n}\n",
						"bytecode": {
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b506104ed806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80630ae5e739146100465780638129fc1c1461008a57806385e6853114610094575b600080fd5b6100886004803603602081101561005c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506100d8565b005b6100926101f8565b005b6100d6600480360360208110156100aa57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061034d565b005b60011515600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151461019e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f4163636573732064656e6965640000000000000000000000000000000000000081525060200191505060405180910390fd5b60018060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b600060019054906101000a900460ff16806102175750610216610465565b5b8061022d575060008054906101000a900460ff16155b610282576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e81526020018061048a602e913960400191505060405180910390fd5b60008060019054906101000a900460ff1615905080156102d2576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b60018060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550801561034a5760008060016101000a81548160ff0219169083151502179055505b50565b60011515600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514610413576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f4163636573732064656e6965640000000000000000000000000000000000000081525060200191505060405180910390fd5b600160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549060ff021916905550565b600061047030610476565b15905090565b600080823b90506000811191505091905056fe496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564a264697066735822122088ffac42f30d9b5914afdf539bfdd36df579164be29546e5d595525b2ec96d4564736f6c634300060c0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4ED DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x41 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xAE5E739 EQ PUSH2 0x46 JUMPI DUP1 PUSH4 0x8129FC1C EQ PUSH2 0x8A JUMPI DUP1 PUSH4 0x85E68531 EQ PUSH2 0x94 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x88 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x5C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0xD8 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x92 PUSH2 0x1F8 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xD6 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xAA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x34D JUMP JUMPDEST STOP JUMPDEST PUSH1 0x1 ISZERO ISZERO PUSH1 0x1 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO EQ PUSH2 0x19E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0xD DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x4163636573732064656E69656400000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 DUP1 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND DUP1 PUSH2 0x217 JUMPI POP PUSH2 0x216 PUSH2 0x465 JUMP JUMPDEST JUMPDEST DUP1 PUSH2 0x22D JUMPI POP PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO JUMPDEST PUSH2 0x282 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2E DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x48A PUSH1 0x2E SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO SWAP1 POP DUP1 ISZERO PUSH2 0x2D2 JUMPI PUSH1 0x1 PUSH1 0x0 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP1 ISZERO PUSH2 0x34A JUMPI PUSH1 0x0 DUP1 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST POP JUMP JUMPDEST PUSH1 0x1 ISZERO ISZERO PUSH1 0x1 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO EQ PUSH2 0x413 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0xD DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x4163636573732064656E69656400000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH1 0xFF MUL NOT AND SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x470 ADDRESS PUSH2 0x476 JUMP JUMPDEST ISZERO SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 EXTCODESIZE SWAP1 POP PUSH1 0x0 DUP2 GT SWAP2 POP POP SWAP2 SWAP1 POP JUMP INVALID 0x49 PUSH15 0x697469616C697A61626C653A20636F PUSH15 0x747261637420697320616C72656164 PUSH26 0x20696E697469616C697A6564A264697066735822122088FFAC42 RETURN 0xD SWAP12 MSIZE EQ 0xAF 0xDF MSTORE8 SWAP12 REVERT 0xD3 PUSH14 0xF579164BE29546E5D595525B2EC9 PUSH14 0x4564736F6C634300060C00330000 ",
							"sourceMap": "96:541:2:-:0;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"immutableReferences": {},
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50600436106100415760003560e01c80630ae5e739146100465780638129fc1c1461008a57806385e6853114610094575b600080fd5b6100886004803603602081101561005c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506100d8565b005b6100926101f8565b005b6100d6600480360360208110156100aa57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061034d565b005b60011515600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151461019e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f4163636573732064656e6965640000000000000000000000000000000000000081525060200191505060405180910390fd5b60018060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b600060019054906101000a900460ff16806102175750610216610465565b5b8061022d575060008054906101000a900460ff16155b610282576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e81526020018061048a602e913960400191505060405180910390fd5b60008060019054906101000a900460ff1615905080156102d2576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b60018060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550801561034a5760008060016101000a81548160ff0219169083151502179055505b50565b60011515600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514610413576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f4163636573732064656e6965640000000000000000000000000000000000000081525060200191505060405180910390fd5b600160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549060ff021916905550565b600061047030610476565b15905090565b600080823b90506000811191505091905056fe496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564a264697066735822122088ffac42f30d9b5914afdf539bfdd36df579164be29546e5d595525b2ec96d4564736f6c634300060c0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x41 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xAE5E739 EQ PUSH2 0x46 JUMPI DUP1 PUSH4 0x8129FC1C EQ PUSH2 0x8A JUMPI DUP1 PUSH4 0x85E68531 EQ PUSH2 0x94 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x88 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x5C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0xD8 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x92 PUSH2 0x1F8 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xD6 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xAA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x34D JUMP JUMPDEST STOP JUMPDEST PUSH1 0x1 ISZERO ISZERO PUSH1 0x1 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO EQ PUSH2 0x19E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0xD DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x4163636573732064656E69656400000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 DUP1 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND DUP1 PUSH2 0x217 JUMPI POP PUSH2 0x216 PUSH2 0x465 JUMP JUMPDEST JUMPDEST DUP1 PUSH2 0x22D JUMPI POP PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO JUMPDEST PUSH2 0x282 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2E DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x48A PUSH1 0x2E SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO SWAP1 POP DUP1 ISZERO PUSH2 0x2D2 JUMPI PUSH1 0x1 PUSH1 0x0 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP1 ISZERO PUSH2 0x34A JUMPI PUSH1 0x0 DUP1 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST POP JUMP JUMPDEST PUSH1 0x1 ISZERO ISZERO PUSH1 0x1 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO EQ PUSH2 0x413 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0xD DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x4163636573732064656E69656400000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH1 0xFF MUL NOT AND SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x470 ADDRESS PUSH2 0x476 JUMP JUMPDEST ISZERO SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 EXTCODESIZE SWAP1 POP PUSH1 0x0 DUP2 GT SWAP2 POP POP SWAP2 SWAP1 POP JUMP INVALID 0x49 PUSH15 0x697469616C697A61626C653A20636F PUSH15 0x747261637420697320616C72656164 PUSH26 0x20696E697469616C697A6564A264697066735822122088FFAC42 RETURN 0xD SWAP12 MSIZE EQ 0xAF 0xDF MSTORE8 SWAP12 REVERT 0xD3 PUSH14 0xF579164BE29546E5D595525B2EC9 PUSH14 0x4564736F6C634300060C00330000 ",
							"sourceMap": "96:541:2:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;345:85;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;256:83;;;:::i;:::-;;436:90;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;345:85;594:4;572:26;;:6;:18;579:10;572:18;;;;;;;;;;;;;;;;;;;;;;;;;:26;;;564:52;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;419:4:::1;406:6:::0;:10:::1;413:2;406:10;;;;;;;;;;;;;;;;:17;;;;;;;;;;;;;;;;;;345:85:::0;:::o;256:83::-;1512:13:0;;;;;;;;;;;:33;;;;1529:16;:14;:16::i;:::-;1512:33;:50;;;;1550:12;;;;;;;;;;1549:13;1512:50;1504:109;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1624:19;1647:13;;;;;;;;;;;1646:14;1624:36;;1674:14;1670:98;;;1720:4;1704:13;;:20;;;;;;;;;;;;;;;;;;1753:4;1738:12;;:19;;;;;;;;;;;;;;;;;;1670:98;328:4:2::1;307:6:::0;:18:::1;314:10;307:18;;;;;;;;;;;;;;;;:25;;;;;;;;;;;;;;;;;;1794:14:0::0;1790:66;;;1840:5;1824:13;;:21;;;;;;;;;;;;;;;;;;1790:66;256:83:2;:::o;436:90::-;594:4;572:26;;:6;:18;579:10;572:18;;;;;;;;;;;;;;;;;;;;;;;;;:26;;;564:52;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;507:6:::1;:12;514:4;507:12;;;;;;;;;;;;;;;;500:19;;;;;;;;;;;436:90:::0;:::o;1952:123:0:-;2000:4;2024:44;2062:4;2024:29;:44::i;:::-;2023:45;2016:52;;1952:123;:::o;737:413:1:-;797:4;1000:12;1109:7;1097:20;1089:28;;1142:1;1135:4;:8;1128:15;;;737:413;;;:::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "252200",
								"executionCost": "294",
								"totalCost": "252494"
							},
							"external": {
								"grantAccess(address)": "22129",
								"initialize()": "infinite",
								"revokeAccess(address)": "22148"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 96,
									"end": 637,
									"name": "PUSH",
									"source": 2,
									"value": "80"
								},
								{
									"begin": 96,
									"end": 637,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 96,
									"end": 637,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 96,
									"end": 637,
									"name": "CALLVALUE",
									"source": 2
								},
								{
									"begin": 96,
									"end": 637,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 96,
									"end": 637,
									"name": "ISZERO",
									"source": 2
								},
								{
									"begin": 96,
									"end": 637,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "1"
								},
								{
									"begin": 96,
									"end": 637,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 96,
									"end": 637,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 96,
									"end": 637,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 96,
									"end": 637,
									"name": "REVERT",
									"source": 2
								},
								{
									"begin": 96,
									"end": 637,
									"name": "tag",
									"source": 2,
									"value": "1"
								},
								{
									"begin": 96,
									"end": 637,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 96,
									"end": 637,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 96,
									"end": 637,
									"name": "PUSH #[$]",
									"source": 2,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 96,
									"end": 637,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 96,
									"end": 637,
									"name": "PUSH [$]",
									"source": 2,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 96,
									"end": 637,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 96,
									"end": 637,
									"name": "CODECOPY",
									"source": 2
								},
								{
									"begin": 96,
									"end": 637,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 96,
									"end": 637,
									"name": "RETURN",
									"source": 2
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122088ffac42f30d9b5914afdf539bfdd36df579164be29546e5d595525b2ec96d4564736f6c634300060c0033",
									".code": [
										{
											"begin": 96,
											"end": 637,
											"name": "PUSH",
											"source": 2,
											"value": "80"
										},
										{
											"begin": 96,
											"end": 637,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 96,
											"end": 637,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 96,
											"end": 637,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 96,
											"end": 637,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 96,
											"end": 637,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 96,
											"end": 637,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 96,
											"end": 637,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 96,
											"end": 637,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 96,
											"end": 637,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 96,
											"end": 637,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 96,
											"end": 637,
											"name": "tag",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 96,
											"end": 637,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 96,
											"end": 637,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 96,
											"end": 637,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 96,
											"end": 637,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 96,
											"end": 637,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 96,
											"end": 637,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 96,
											"end": 637,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 96,
											"end": 637,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 96,
											"end": 637,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 96,
											"end": 637,
											"name": "PUSH",
											"source": 2,
											"value": "E0"
										},
										{
											"begin": 96,
											"end": 637,
											"name": "SHR",
											"source": 2
										},
										{
											"begin": 96,
											"end": 637,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 96,
											"end": 637,
											"name": "PUSH",
											"source": 2,
											"value": "AE5E739"
										},
										{
											"begin": 96,
											"end": 637,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 96,
											"end": 637,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 96,
											"end": 637,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 96,
											"end": 637,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 96,
											"end": 637,
											"name": "PUSH",
											"source": 2,
											"value": "8129FC1C"
										},
										{
											"begin": 96,
											"end": 637,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 96,
											"end": 637,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 96,
											"end": 637,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 96,
											"end": 637,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 96,
											"end": 637,
											"name": "PUSH",
											"source": 2,
											"value": "85E68531"
										},
										{
											"begin": 96,
											"end": 637,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 96,
											"end": 637,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "5"
										},
										{
											"begin": 96,
											"end": 637,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 96,
											"end": 637,
											"name": "tag",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 96,
											"end": 637,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 96,
											"end": 637,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 96,
											"end": 637,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 96,
											"end": 637,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 345,
											"end": 430,
											"name": "tag",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 345,
											"end": 430,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 345,
											"end": 430,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "6"
										},
										{
											"begin": 345,
											"end": 430,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 345,
											"end": 430,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 345,
											"end": 430,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 345,
											"end": 430,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 345,
											"end": 430,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 345,
											"end": 430,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 345,
											"end": 430,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 345,
											"end": 430,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 345,
											"end": 430,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "7"
										},
										{
											"begin": 345,
											"end": 430,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 345,
											"end": 430,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 345,
											"end": 430,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 345,
											"end": 430,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 345,
											"end": 430,
											"name": "tag",
											"source": 2,
											"value": "7"
										},
										{
											"begin": 345,
											"end": 430,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 345,
											"end": 430,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 345,
											"end": 430,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 345,
											"end": 430,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 345,
											"end": 430,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 345,
											"end": 430,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 345,
											"end": 430,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 345,
											"end": 430,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 345,
											"end": 430,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 345,
											"end": 430,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 345,
											"end": 430,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 345,
											"end": 430,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 345,
											"end": 430,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 345,
											"end": 430,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 345,
											"end": 430,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 345,
											"end": 430,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 345,
											"end": 430,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 345,
											"end": 430,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 345,
											"end": 430,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 345,
											"end": 430,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "8"
										},
										{
											"begin": 345,
											"end": 430,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 345,
											"end": 430,
											"name": "tag",
											"source": 2,
											"value": "6"
										},
										{
											"begin": 345,
											"end": 430,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 345,
											"end": 430,
											"name": "STOP",
											"source": 2
										},
										{
											"begin": 256,
											"end": 339,
											"name": "tag",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 256,
											"end": 339,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 256,
											"end": 339,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "9"
										},
										{
											"begin": 256,
											"end": 339,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "10"
										},
										{
											"begin": 256,
											"end": 339,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 256,
											"end": 339,
											"name": "tag",
											"source": 2,
											"value": "9"
										},
										{
											"begin": 256,
											"end": 339,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 256,
											"end": 339,
											"name": "STOP",
											"source": 2
										},
										{
											"begin": 436,
											"end": 526,
											"name": "tag",
											"source": 2,
											"value": "5"
										},
										{
											"begin": 436,
											"end": 526,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 436,
											"end": 526,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "11"
										},
										{
											"begin": 436,
											"end": 526,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 436,
											"end": 526,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 436,
											"end": 526,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 436,
											"end": 526,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 436,
											"end": 526,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 436,
											"end": 526,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 436,
											"end": 526,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 436,
											"end": 526,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 436,
											"end": 526,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "12"
										},
										{
											"begin": 436,
											"end": 526,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 436,
											"end": 526,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 436,
											"end": 526,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 436,
											"end": 526,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 436,
											"end": 526,
											"name": "tag",
											"source": 2,
											"value": "12"
										},
										{
											"begin": 436,
											"end": 526,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 436,
											"end": 526,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 436,
											"end": 526,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 436,
											"end": 526,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 436,
											"end": 526,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 436,
											"end": 526,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 436,
											"end": 526,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 436,
											"end": 526,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 436,
											"end": 526,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 436,
											"end": 526,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 436,
											"end": 526,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 436,
											"end": 526,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 436,
											"end": 526,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 436,
											"end": 526,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 436,
											"end": 526,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 436,
											"end": 526,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 436,
											"end": 526,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 436,
											"end": 526,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 436,
											"end": 526,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 436,
											"end": 526,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "13"
										},
										{
											"begin": 436,
											"end": 526,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 436,
											"end": 526,
											"name": "tag",
											"source": 2,
											"value": "11"
										},
										{
											"begin": 436,
											"end": 526,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 436,
											"end": 526,
											"name": "STOP",
											"source": 2
										},
										{
											"begin": 345,
											"end": 430,
											"name": "tag",
											"source": 2,
											"value": "8"
										},
										{
											"begin": 345,
											"end": 430,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 594,
											"end": 598,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 572,
											"end": 598,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 572,
											"end": 598,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 572,
											"end": 578,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 572,
											"end": 590,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 579,
											"end": 589,
											"name": "CALLER",
											"source": 2
										},
										{
											"begin": 572,
											"end": 590,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 572,
											"end": 590,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 572,
											"end": 590,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 572,
											"end": 590,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 572,
											"end": 590,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 572,
											"end": 590,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 572,
											"end": 590,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 572,
											"end": 590,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 572,
											"end": 590,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 572,
											"end": 590,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 572,
											"end": 590,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 572,
											"end": 590,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 572,
											"end": 590,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 572,
											"end": 590,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 572,
											"end": 590,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 572,
											"end": 590,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 572,
											"end": 590,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 572,
											"end": 590,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 572,
											"end": 590,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 572,
											"end": 590,
											"name": "PUSH",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 572,
											"end": 590,
											"name": "EXP",
											"source": 2
										},
										{
											"begin": 572,
											"end": 590,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 572,
											"end": 590,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": 572,
											"end": 590,
											"name": "PUSH",
											"source": 2,
											"value": "FF"
										},
										{
											"begin": 572,
											"end": 590,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 572,
											"end": 598,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 572,
											"end": 598,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 572,
											"end": 598,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 564,
											"end": 616,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "15"
										},
										{
											"begin": 564,
											"end": 616,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 564,
											"end": 616,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 564,
											"end": 616,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 564,
											"end": 616,
											"name": "PUSH",
											"source": 2,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 564,
											"end": 616,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 564,
											"end": 616,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 564,
											"end": 616,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 564,
											"end": 616,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 564,
											"end": 616,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 564,
											"end": 616,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 564,
											"end": 616,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 564,
											"end": 616,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 564,
											"end": 616,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 564,
											"end": 616,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 564,
											"end": 616,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 564,
											"end": 616,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 564,
											"end": 616,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 564,
											"end": 616,
											"name": "PUSH",
											"source": 2,
											"value": "D"
										},
										{
											"begin": 564,
											"end": 616,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 564,
											"end": 616,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 564,
											"end": 616,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 564,
											"end": 616,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 564,
											"end": 616,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 564,
											"end": 616,
											"name": "PUSH",
											"source": 2,
											"value": "4163636573732064656E69656400000000000000000000000000000000000000"
										},
										{
											"begin": 564,
											"end": 616,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 564,
											"end": 616,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 564,
											"end": 616,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 564,
											"end": 616,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 564,
											"end": 616,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 564,
											"end": 616,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 564,
											"end": 616,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 564,
											"end": 616,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 564,
											"end": 616,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 564,
											"end": 616,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 564,
											"end": 616,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 564,
											"end": 616,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 564,
											"end": 616,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 564,
											"end": 616,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 564,
											"end": 616,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 564,
											"end": 616,
											"name": "tag",
											"source": 2,
											"value": "15"
										},
										{
											"begin": 564,
											"end": 616,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 419,
											"end": 423,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 406,
											"end": 412,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 406,
											"end": 416,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 413,
											"end": 415,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 406,
											"end": 416,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 406,
											"end": 416,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 406,
											"end": 416,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 406,
											"end": 416,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 406,
											"end": 416,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 406,
											"end": 416,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 406,
											"end": 416,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 406,
											"end": 416,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 406,
											"end": 416,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 406,
											"end": 416,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 406,
											"end": 416,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 406,
											"end": 416,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 406,
											"end": 416,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 406,
											"end": 416,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 406,
											"end": 416,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 406,
											"end": 416,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 406,
											"end": 423,
											"name": "PUSH",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 406,
											"end": 423,
											"name": "EXP",
											"source": 2
										},
										{
											"begin": 406,
											"end": 423,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 406,
											"end": 423,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 406,
											"end": 423,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 406,
											"end": 423,
											"name": "PUSH",
											"source": 2,
											"value": "FF"
										},
										{
											"begin": 406,
											"end": 423,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 406,
											"end": 423,
											"name": "NOT",
											"source": 2
										},
										{
											"begin": 406,
											"end": 423,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 406,
											"end": 423,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 406,
											"end": 423,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 406,
											"end": 423,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 406,
											"end": 423,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 406,
											"end": 423,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 406,
											"end": 423,
											"name": "OR",
											"source": 2
										},
										{
											"begin": 406,
											"end": 423,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 406,
											"end": 423,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 406,
											"end": 423,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 345,
											"end": 430,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 345,
											"end": 430,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 256,
											"end": 339,
											"name": "tag",
											"source": 2,
											"value": "10"
										},
										{
											"begin": 256,
											"end": 339,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1512,
											"end": 1525,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1512,
											"end": 1525,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 1512,
											"end": 1525,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1512,
											"end": 1525,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 1512,
											"end": 1525,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1512,
											"end": 1525,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 1512,
											"end": 1525,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 1512,
											"end": 1525,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1512,
											"end": 1525,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 1512,
											"end": 1525,
											"name": "PUSH",
											"source": 0,
											"value": "FF"
										},
										{
											"begin": 1512,
											"end": 1525,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1512,
											"end": 1545,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1512,
											"end": 1545,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "18"
										},
										{
											"begin": 1512,
											"end": 1545,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1512,
											"end": 1545,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1529,
											"end": 1545,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "19"
										},
										{
											"begin": 1529,
											"end": 1543,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1529,
											"end": 1545,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1529,
											"end": 1545,
											"name": "tag",
											"source": 0,
											"value": "19"
										},
										{
											"begin": 1529,
											"end": 1545,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1512,
											"end": 1545,
											"name": "tag",
											"source": 0,
											"value": "18"
										},
										{
											"begin": 1512,
											"end": 1545,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1512,
											"end": 1562,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1512,
											"end": 1562,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "21"
										},
										{
											"begin": 1512,
											"end": 1562,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1512,
											"end": 1562,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1550,
											"end": 1562,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1550,
											"end": 1562,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1550,
											"end": 1562,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 1550,
											"end": 1562,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1550,
											"end": 1562,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 1550,
											"end": 1562,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 1550,
											"end": 1562,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1550,
											"end": 1562,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 1550,
											"end": 1562,
											"name": "PUSH",
											"source": 0,
											"value": "FF"
										},
										{
											"begin": 1550,
											"end": 1562,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1549,
											"end": 1562,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 1512,
											"end": 1562,
											"name": "tag",
											"source": 0,
											"value": "21"
										},
										{
											"begin": 1512,
											"end": 1562,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "22"
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "PUSH",
											"source": 0,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "PUSH",
											"source": 0,
											"value": "2E"
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "PUSH data",
											"source": 0,
											"value": "7A2A4E26842155EA933FE6EB6E3137EB5A296DCDF55721C552BE7B4C3CC23759"
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "PUSH",
											"source": 0,
											"value": "2E"
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "CODECOPY",
											"source": 0
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "tag",
											"source": 0,
											"value": "22"
										},
										{
											"begin": 1504,
											"end": 1613,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1624,
											"end": 1643,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1647,
											"end": 1660,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1647,
											"end": 1660,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 1647,
											"end": 1660,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1647,
											"end": 1660,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 1647,
											"end": 1660,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1647,
											"end": 1660,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 1647,
											"end": 1660,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 1647,
											"end": 1660,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1647,
											"end": 1660,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 1647,
											"end": 1660,
											"name": "PUSH",
											"source": 0,
											"value": "FF"
										},
										{
											"begin": 1647,
											"end": 1660,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1646,
											"end": 1660,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 1624,
											"end": 1660,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1624,
											"end": 1660,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1674,
											"end": 1688,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1670,
											"end": 1768,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 1670,
											"end": 1768,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "23"
										},
										{
											"begin": 1670,
											"end": 1768,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1720,
											"end": 1724,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 1704,
											"end": 1717,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1704,
											"end": 1717,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 1704,
											"end": 1724,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 1704,
											"end": 1724,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 1704,
											"end": 1724,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1704,
											"end": 1724,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 1704,
											"end": 1724,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1704,
											"end": 1724,
											"name": "PUSH",
											"source": 0,
											"value": "FF"
										},
										{
											"begin": 1704,
											"end": 1724,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 1704,
											"end": 1724,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 1704,
											"end": 1724,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1704,
											"end": 1724,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1704,
											"end": 1724,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 1704,
											"end": 1724,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 1704,
											"end": 1724,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 1704,
											"end": 1724,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 1704,
											"end": 1724,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 1704,
											"end": 1724,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1704,
											"end": 1724,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 1704,
											"end": 1724,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1753,
											"end": 1757,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 1738,
											"end": 1750,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1738,
											"end": 1750,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1738,
											"end": 1757,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 1738,
											"end": 1757,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 1738,
											"end": 1757,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1738,
											"end": 1757,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 1738,
											"end": 1757,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1738,
											"end": 1757,
											"name": "PUSH",
											"source": 0,
											"value": "FF"
										},
										{
											"begin": 1738,
											"end": 1757,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 1738,
											"end": 1757,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 1738,
											"end": 1757,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1738,
											"end": 1757,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1738,
											"end": 1757,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 1738,
											"end": 1757,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 1738,
											"end": 1757,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 1738,
											"end": 1757,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 1738,
											"end": 1757,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 1738,
											"end": 1757,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1738,
											"end": 1757,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 1738,
											"end": 1757,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1670,
											"end": 1768,
											"name": "tag",
											"source": 0,
											"value": "23"
										},
										{
											"begin": 1670,
											"end": 1768,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 328,
											"end": 332,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 307,
											"end": 313,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 307,
											"end": 325,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 314,
											"end": 324,
											"name": "CALLER",
											"source": 2
										},
										{
											"begin": 307,
											"end": 325,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 307,
											"end": 325,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 307,
											"end": 325,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 307,
											"end": 325,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 307,
											"end": 325,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 307,
											"end": 325,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 307,
											"end": 325,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 307,
											"end": 325,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 307,
											"end": 325,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 307,
											"end": 325,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 307,
											"end": 325,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 307,
											"end": 325,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 307,
											"end": 325,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 307,
											"end": 325,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 307,
											"end": 325,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 307,
											"end": 325,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 307,
											"end": 332,
											"name": "PUSH",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 307,
											"end": 332,
											"name": "EXP",
											"source": 2
										},
										{
											"begin": 307,
											"end": 332,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 307,
											"end": 332,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 307,
											"end": 332,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 307,
											"end": 332,
											"name": "PUSH",
											"source": 2,
											"value": "FF"
										},
										{
											"begin": 307,
											"end": 332,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 307,
											"end": 332,
											"name": "NOT",
											"source": 2
										},
										{
											"begin": 307,
											"end": 332,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 307,
											"end": 332,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 307,
											"end": 332,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 307,
											"end": 332,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 307,
											"end": 332,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 307,
											"end": 332,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 307,
											"end": 332,
											"name": "OR",
											"source": 2
										},
										{
											"begin": 307,
											"end": 332,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 307,
											"end": 332,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 307,
											"end": 332,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1794,
											"end": 1808,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1790,
											"end": 1856,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 1790,
											"end": 1856,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "25"
										},
										{
											"begin": 1790,
											"end": 1856,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1840,
											"end": 1845,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1824,
											"end": 1837,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1824,
											"end": 1837,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 1824,
											"end": 1845,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 1824,
											"end": 1845,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 1824,
											"end": 1845,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1824,
											"end": 1845,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 1824,
											"end": 1845,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1824,
											"end": 1845,
											"name": "PUSH",
											"source": 0,
											"value": "FF"
										},
										{
											"begin": 1824,
											"end": 1845,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 1824,
											"end": 1845,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 1824,
											"end": 1845,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1824,
											"end": 1845,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1824,
											"end": 1845,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 1824,
											"end": 1845,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 1824,
											"end": 1845,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 1824,
											"end": 1845,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 1824,
											"end": 1845,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 1824,
											"end": 1845,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1824,
											"end": 1845,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 1824,
											"end": 1845,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1790,
											"end": 1856,
											"name": "tag",
											"source": 0,
											"value": "25"
										},
										{
											"begin": 1790,
											"end": 1856,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 256,
											"end": 339,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 256,
											"end": 339,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 436,
											"end": 526,
											"name": "tag",
											"source": 2,
											"value": "13"
										},
										{
											"begin": 436,
											"end": 526,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 594,
											"end": 598,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 572,
											"end": 598,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 572,
											"end": 598,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 572,
											"end": 578,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 572,
											"end": 590,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 579,
											"end": 589,
											"name": "CALLER",
											"source": 2
										},
										{
											"begin": 572,
											"end": 590,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 572,
											"end": 590,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 572,
											"end": 590,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 572,
											"end": 590,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 572,
											"end": 590,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 572,
											"end": 590,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 572,
											"end": 590,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 572,
											"end": 590,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 572,
											"end": 590,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 572,
											"end": 590,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 572,
											"end": 590,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 572,
											"end": 590,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 572,
											"end": 590,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 572,
											"end": 590,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 572,
											"end": 590,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 572,
											"end": 590,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 572,
											"end": 590,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 572,
											"end": 590,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 572,
											"end": 590,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 572,
											"end": 590,
											"name": "PUSH",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 572,
											"end": 590,
											"name": "EXP",
											"source": 2
										},
										{
											"begin": 572,
											"end": 590,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 572,
											"end": 590,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": 572,
											"end": 590,
											"name": "PUSH",
											"source": 2,
											"value": "FF"
										},
										{
											"begin": 572,
											"end": 590,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 572,
											"end": 598,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 572,
											"end": 598,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 572,
											"end": 598,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 564,
											"end": 616,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "27"
										},
										{
											"begin": 564,
											"end": 616,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 564,
											"end": 616,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 564,
											"end": 616,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 564,
											"end": 616,
											"name": "PUSH",
											"source": 2,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 564,
											"end": 616,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 564,
											"end": 616,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 564,
											"end": 616,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 564,
											"end": 616,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 564,
											"end": 616,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 564,
											"end": 616,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 564,
											"end": 616,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 564,
											"end": 616,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 564,
											"end": 616,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 564,
											"end": 616,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 564,
											"end": 616,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 564,
											"end": 616,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 564,
											"end": 616,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 564,
											"end": 616,
											"name": "PUSH",
											"source": 2,
											"value": "D"
										},
										{
											"begin": 564,
											"end": 616,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 564,
											"end": 616,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 564,
											"end": 616,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 564,
											"end": 616,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 564,
											"end": 616,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 564,
											"end": 616,
											"name": "PUSH",
											"source": 2,
											"value": "4163636573732064656E69656400000000000000000000000000000000000000"
										},
										{
											"begin": 564,
											"end": 616,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 564,
											"end": 616,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 564,
											"end": 616,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 564,
											"end": 616,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 564,
											"end": 616,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 564,
											"end": 616,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 564,
											"end": 616,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 564,
											"end": 616,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 564,
											"end": 616,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 564,
											"end": 616,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 564,
											"end": 616,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 564,
											"end": 616,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 564,
											"end": 616,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 564,
											"end": 616,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 564,
											"end": 616,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 564,
											"end": 616,
											"name": "tag",
											"source": 2,
											"value": "27"
										},
										{
											"begin": 564,
											"end": 616,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 507,
											"end": 513,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 507,
											"end": 519,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 514,
											"end": 518,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 507,
											"end": 519,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 507,
											"end": 519,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 507,
											"end": 519,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 507,
											"end": 519,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 507,
											"end": 519,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 507,
											"end": 519,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 507,
											"end": 519,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 507,
											"end": 519,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 507,
											"end": 519,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 507,
											"end": 519,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 507,
											"end": 519,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 507,
											"end": 519,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 507,
											"end": 519,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 507,
											"end": 519,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 507,
											"end": 519,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 507,
											"end": 519,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 500,
											"end": 519,
											"name": "PUSH",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 500,
											"end": 519,
											"name": "EXP",
											"source": 2
										},
										{
											"begin": 500,
											"end": 519,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 500,
											"end": 519,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 500,
											"end": 519,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 500,
											"end": 519,
											"name": "PUSH",
											"source": 2,
											"value": "FF"
										},
										{
											"begin": 500,
											"end": 519,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 500,
											"end": 519,
											"name": "NOT",
											"source": 2
										},
										{
											"begin": 500,
											"end": 519,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 500,
											"end": 519,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 500,
											"end": 519,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 436,
											"end": 526,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 436,
											"end": 526,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 1952,
											"end": 2075,
											"name": "tag",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1952,
											"end": 2075,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2000,
											"end": 2004,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2024,
											"end": 2068,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "30"
										},
										{
											"begin": 2062,
											"end": 2066,
											"name": "ADDRESS",
											"source": 0
										},
										{
											"begin": 2024,
											"end": 2053,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "31"
										},
										{
											"begin": 2024,
											"end": 2068,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2024,
											"end": 2068,
											"name": "tag",
											"source": 0,
											"value": "30"
										},
										{
											"begin": 2024,
											"end": 2068,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2023,
											"end": 2068,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 2016,
											"end": 2068,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2016,
											"end": 2068,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1952,
											"end": 2075,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1952,
											"end": 2075,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 737,
											"end": 1150,
											"name": "tag",
											"source": 1,
											"value": "31"
										},
										{
											"begin": 737,
											"end": 1150,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 797,
											"end": 801,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 1000,
											"end": 1012,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 1109,
											"end": 1116,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 1097,
											"end": 1117,
											"name": "EXTCODESIZE",
											"source": 1
										},
										{
											"begin": 1089,
											"end": 1117,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 1089,
											"end": 1117,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 1142,
											"end": 1143,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 1135,
											"end": 1139,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 1135,
											"end": 1143,
											"name": "GT",
											"source": 1
										},
										{
											"begin": 1128,
											"end": 1143,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 1128,
											"end": 1143,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 1128,
											"end": 1143,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 737,
											"end": 1150,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 737,
											"end": 1150,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 737,
											"end": 1150,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 737,
											"end": 1150,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										}
									],
									".data": {
										"7A2A4E26842155EA933FE6EB6E3137EB5A296DCDF55721C552BE7B4C3CC23759": "496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564"
									}
								}
							}
						},
						"methodIdentifiers": {
							"grantAccess(address)": "0ae5e739",
							"initialize()": "8129fc1c",
							"revokeAccess(address)": "85e68531"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"grantAccess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"revokeAccess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/multiAccessUpgradeable.sol\":\"MultiAccessUpgradeable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":{\"keccak256\":\"0xd8e4eb08dcc1d1860fb347ba5ffd595242b9a1b66d49a47f2b4cb51c3f35017e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7dbc89479d30592e82442edc38053b380f611037a5e6ceafc7bf57a7aa1f0305\",\"dweb:/ipfs/QmcdYtt56WmjeYvsFjK69FnahnAriw88VzY3XRZwXkQKKN\"]},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0xfc5ea91fa9ceb1961023b2a6c978b902888c52b90847ac7813fe3b79524165f6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a6b81dcc816857a9d981386f6d8de49198420ee41cdc0ecade366ab412174d03\",\"dweb:/ipfs/QmV2vznMT6m9qo3pFMAWi3Nz3UDhwesgwFxeXe6Tod3v8A\"]},\"contracts/multiAccessUpgradeable.sol\":{\"keccak256\":\"0x8e9c61c069aea14e3ec57392b34db3686c539eb9fabd25602a89bed1168efa28\",\"urls\":[\"bzz-raw://fe4252164ed8c4865c6fd7db3dd68dd3f1084d7f671f6889985ba3ec31a2872b\",\"dweb:/ipfs/QmZXEoPEcpgo94zvfE4fVnLb5j5rxjsgBvK5edY55Kgk2V\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 6,
								"contract": "contracts/multiAccessUpgradeable.sol:MultiAccessUpgradeable",
								"label": "_initialized",
								"offset": 0,
								"slot": "0",
								"type": "t_bool"
							},
							{
								"astId": 9,
								"contract": "contracts/multiAccessUpgradeable.sol:MultiAccessUpgradeable",
								"label": "_initializing",
								"offset": 1,
								"slot": "0",
								"type": "t_bool"
							},
							{
								"astId": 318,
								"contract": "contracts/multiAccessUpgradeable.sol:MultiAccessUpgradeable",
								"label": "access",
								"offset": 0,
								"slot": "1",
								"type": "t_mapping(t_address,t_bool)"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_mapping(t_address,t_bool)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => bool)",
								"numberOfBytes": "32",
								"value": "t_bool"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"errors": [
			{
				"component": "general",
				"errorCode": "1878",
				"formattedMessage": "contracts/multiAccessUpgradeable.sol: Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n",
				"message": "SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.",
				"severity": "warning",
				"sourceLocation": {
					"end": -1,
					"file": "contracts/multiAccessUpgradeable.sol",
					"start": -1
				},
				"type": "Warning"
			}
		],
		"sources": {
			"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol",
					"exportedSymbols": {
						"Initializable": [
							65
						]
					},
					"id": 66,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								">=",
								"0.4",
								".24",
								"<",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "79:32:0"
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol",
							"file": "../utils/AddressUpgradeable.sol",
							"id": 2,
							"nodeType": "ImportDirective",
							"scope": 66,
							"sourceUnit": 310,
							"src": "113:41:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 3,
								"nodeType": "StructuredDocumentation",
								"src": "156:938:0",
								"text": " @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\n CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n that all initializers are idempotent. This is not verified automatically as constructors are by Solidity."
							},
							"fullyImplemented": true,
							"id": 65,
							"linearizedBaseContracts": [
								65
							],
							"name": "Initializable",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"documentation": {
										"id": 4,
										"nodeType": "StructuredDocumentation",
										"src": "1134:73:0",
										"text": " @dev Indicates that the contract has been initialized."
									},
									"id": 6,
									"mutability": "mutable",
									"name": "_initialized",
									"nodeType": "VariableDeclaration",
									"overrides": null,
									"scope": 65,
									"src": "1212:25:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bool",
										"typeString": "bool"
									},
									"typeName": {
										"id": 5,
										"name": "bool",
										"nodeType": "ElementaryTypeName",
										"src": "1212:4:0",
										"typeDescriptions": {
											"typeIdentifier": "t_bool",
											"typeString": "bool"
										}
									},
									"value": null,
									"visibility": "private"
								},
								{
									"constant": false,
									"documentation": {
										"id": 7,
										"nodeType": "StructuredDocumentation",
										"src": "1244:91:0",
										"text": " @dev Indicates that the contract is in the process of being initialized."
									},
									"id": 9,
									"mutability": "mutable",
									"name": "_initializing",
									"nodeType": "VariableDeclaration",
									"overrides": null,
									"scope": 65,
									"src": "1340:26:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bool",
										"typeString": "bool"
									},
									"typeName": {
										"id": 8,
										"name": "bool",
										"nodeType": "ElementaryTypeName",
										"src": "1340:4:0",
										"typeDescriptions": {
											"typeIdentifier": "t_bool",
											"typeString": "bool"
										}
									},
									"value": null,
									"visibility": "private"
								},
								{
									"body": {
										"id": 47,
										"nodeType": "Block",
										"src": "1494:368:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 19,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"commonType": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"id": 16,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"argumentTypes": null,
																	"id": 13,
																	"name": "_initializing",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 9,
																	"src": "1512:13:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "||",
																"rightExpression": {
																	"argumentTypes": null,
																	"arguments": [],
																	"expression": {
																		"argumentTypes": [],
																		"id": 14,
																		"name": "_isConstructor",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 64,
																		"src": "1529:14:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$__$returns$_t_bool_$",
																			"typeString": "function () view returns (bool)"
																		}
																	},
																	"id": 15,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "1529:16:0",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"src": "1512:33:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "||",
															"rightExpression": {
																"argumentTypes": null,
																"id": 18,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "UnaryOperation",
																"operator": "!",
																"prefix": true,
																"src": "1549:13:0",
																"subExpression": {
																	"argumentTypes": null,
																	"id": 17,
																	"name": "_initialized",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 6,
																	"src": "1550:12:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "1512:50:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564",
															"id": 20,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1564:48:0",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759",
																"typeString": "literal_string \"Initializable: contract is already initialized\""
															},
															"value": "Initializable: contract is already initialized"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759",
																"typeString": "literal_string \"Initializable: contract is already initialized\""
															}
														],
														"id": 12,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "1504:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 21,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1504:109:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 22,
												"nodeType": "ExpressionStatement",
												"src": "1504:109:0"
											},
											{
												"assignments": [
													24
												],
												"declarations": [
													{
														"constant": false,
														"id": 24,
														"mutability": "mutable",
														"name": "isTopLevelCall",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 47,
														"src": "1624:19:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 23,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "1624:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 27,
												"initialValue": {
													"argumentTypes": null,
													"id": 26,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "1646:14:0",
													"subExpression": {
														"argumentTypes": null,
														"id": 25,
														"name": "_initializing",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 9,
														"src": "1647:13:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1624:36:0"
											},
											{
												"condition": {
													"argumentTypes": null,
													"id": 28,
													"name": "isTopLevelCall",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 24,
													"src": "1674:14:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": null,
												"id": 38,
												"nodeType": "IfStatement",
												"src": "1670:98:0",
												"trueBody": {
													"id": 37,
													"nodeType": "Block",
													"src": "1690:78:0",
													"statements": [
														{
															"expression": {
																"argumentTypes": null,
																"id": 31,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"argumentTypes": null,
																	"id": 29,
																	"name": "_initializing",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 9,
																	"src": "1704:13:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"argumentTypes": null,
																	"hexValue": "74727565",
																	"id": 30,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1720:4:0",
																	"subdenomination": null,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																"src": "1704:20:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 32,
															"nodeType": "ExpressionStatement",
															"src": "1704:20:0"
														},
														{
															"expression": {
																"argumentTypes": null,
																"id": 35,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"argumentTypes": null,
																	"id": 33,
																	"name": "_initialized",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 6,
																	"src": "1738:12:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"argumentTypes": null,
																	"hexValue": "74727565",
																	"id": 34,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1753:4:0",
																	"subdenomination": null,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																"src": "1738:19:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 36,
															"nodeType": "ExpressionStatement",
															"src": "1738:19:0"
														}
													]
												}
											},
											{
												"id": 39,
												"nodeType": "PlaceholderStatement",
												"src": "1778:1:0"
											},
											{
												"condition": {
													"argumentTypes": null,
													"id": 40,
													"name": "isTopLevelCall",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 24,
													"src": "1794:14:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": null,
												"id": 46,
												"nodeType": "IfStatement",
												"src": "1790:66:0",
												"trueBody": {
													"id": 45,
													"nodeType": "Block",
													"src": "1810:46:0",
													"statements": [
														{
															"expression": {
																"argumentTypes": null,
																"id": 43,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"argumentTypes": null,
																	"id": 41,
																	"name": "_initializing",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 9,
																	"src": "1824:13:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"argumentTypes": null,
																	"hexValue": "66616c7365",
																	"id": 42,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1840:5:0",
																	"subdenomination": null,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "false"
																},
																"src": "1824:21:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 44,
															"nodeType": "ExpressionStatement",
															"src": "1824:21:0"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 10,
										"nodeType": "StructuredDocumentation",
										"src": "1373:93:0",
										"text": " @dev Modifier to protect an initializer function from being invoked twice."
									},
									"id": 48,
									"name": "initializer",
									"nodeType": "ModifierDefinition",
									"overrides": null,
									"parameters": {
										"id": 11,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1491:2:0"
									},
									"src": "1471:391:0",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 63,
										"nodeType": "Block",
										"src": "2006:69:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"id": 61,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "2023:45:0",
													"subExpression": {
														"argumentTypes": null,
														"arguments": [
															{
																"argumentTypes": null,
																"arguments": [
																	{
																		"argumentTypes": null,
																		"id": 58,
																		"name": "this",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": -28,
																		"src": "2062:4:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_Initializable_$65",
																			"typeString": "contract Initializable"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_Initializable_$65",
																			"typeString": "contract Initializable"
																		}
																	],
																	"id": 57,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2054:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 56,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "2054:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": null,
																			"typeString": null
																		}
																	}
																},
																"id": 59,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2054:13:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"expression": {
																"argumentTypes": null,
																"id": 54,
																"name": "AddressUpgradeable",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 309,
																"src": "2024:18:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_AddressUpgradeable_$309_$",
																	"typeString": "type(library AddressUpgradeable)"
																}
															},
															"id": 55,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "isContract",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 85,
															"src": "2024:29:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																"typeString": "function (address) view returns (bool)"
															}
														},
														"id": 60,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2024:44:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 53,
												"id": 62,
												"nodeType": "Return",
												"src": "2016:52:0"
											}
										]
									},
									"documentation": {
										"id": 49,
										"nodeType": "StructuredDocumentation",
										"src": "1868:79:0",
										"text": "@dev Returns true if and only if the function is running in the constructor"
									},
									"id": 64,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_isConstructor",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 50,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1975:2:0"
									},
									"returnParameters": {
										"id": 53,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 52,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 64,
												"src": "2000:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 51,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2000:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1999:6:0"
									},
									"scope": 65,
									"src": "1952:123:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 66,
							"src": "1095:982:0"
						}
					],
					"src": "79:1999:0"
				},
				"id": 0
			},
			"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol",
					"exportedSymbols": {
						"AddressUpgradeable": [
							309
						]
					},
					"id": 310,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 67,
							"literals": [
								"solidity",
								">=",
								"0.6",
								".2",
								"<",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "33:31:1"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 68,
								"nodeType": "StructuredDocumentation",
								"src": "66:67:1",
								"text": " @dev Collection of functions related to the address type"
							},
							"fullyImplemented": true,
							"id": 309,
							"linearizedBaseContracts": [
								309
							],
							"name": "AddressUpgradeable",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 84,
										"nodeType": "Block",
										"src": "803:347:1",
										"statements": [
											{
												"assignments": [
													77
												],
												"declarations": [
													{
														"constant": false,
														"id": 77,
														"mutability": "mutable",
														"name": "size",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 84,
														"src": "1000:12:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 76,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1000:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 78,
												"initialValue": null,
												"nodeType": "VariableDeclarationStatement",
												"src": "1000:12:1"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "1087:32:1",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1089:28:1",
															"value": {
																"arguments": [
																	{
																		"name": "account",
																		"nodeType": "YulIdentifier",
																		"src": "1109:7:1"
																	}
																],
																"functionName": {
																	"name": "extcodesize",
																	"nodeType": "YulIdentifier",
																	"src": "1097:11:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "1097:20:1"
															},
															"variableNames": [
																{
																	"name": "size",
																	"nodeType": "YulIdentifier",
																	"src": "1089:4:1"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 71,
														"isOffset": false,
														"isSlot": false,
														"src": "1109:7:1",
														"valueSize": 1
													},
													{
														"declaration": 77,
														"isOffset": false,
														"isSlot": false,
														"src": "1089:4:1",
														"valueSize": 1
													}
												],
												"id": 79,
												"nodeType": "InlineAssembly",
												"src": "1078:41:1"
											},
											{
												"expression": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 82,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 80,
														"name": "size",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 77,
														"src": "1135:4:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"argumentTypes": null,
														"hexValue": "30",
														"id": 81,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1142:1:1",
														"subdenomination": null,
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1135:8:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 75,
												"id": 83,
												"nodeType": "Return",
												"src": "1128:15:1"
											}
										]
									},
									"documentation": {
										"id": 69,
										"nodeType": "StructuredDocumentation",
										"src": "167:565:1",
										"text": " @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n ===="
									},
									"id": 85,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "isContract",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 72,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 71,
												"mutability": "mutable",
												"name": "account",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 85,
												"src": "757:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 70,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "757:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "756:17:1"
									},
									"returnParameters": {
										"id": 75,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 74,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 85,
												"src": "797:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 73,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "797:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "796:6:1"
									},
									"scope": 309,
									"src": "737:413:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 118,
										"nodeType": "Block",
										"src": "2138:320:1",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 100,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"expression": {
																	"argumentTypes": null,
																	"arguments": [
																		{
																			"argumentTypes": null,
																			"id": 96,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": -28,
																			"src": "2164:4:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_AddressUpgradeable_$309",
																				"typeString": "library AddressUpgradeable"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_AddressUpgradeable_$309",
																				"typeString": "library AddressUpgradeable"
																			}
																		],
																		"id": 95,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2156:7:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 94,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "2156:7:1",
																			"typeDescriptions": {
																				"typeIdentifier": null,
																				"typeString": null
																			}
																		}
																	},
																	"id": 97,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2156:13:1",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 98,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"referencedDeclaration": null,
																"src": "2156:21:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"argumentTypes": null,
																"id": 99,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 90,
																"src": "2181:6:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2156:31:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "416464726573733a20696e73756666696369656e742062616c616e6365",
															"id": 101,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2189:31:1",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
																"typeString": "literal_string \"Address: insufficient balance\""
															},
															"value": "Address: insufficient balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
																"typeString": "literal_string \"Address: insufficient balance\""
															}
														],
														"id": 93,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "2148:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 102,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2148:73:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 103,
												"nodeType": "ExpressionStatement",
												"src": "2148:73:1"
											},
											{
												"assignments": [
													105,
													null
												],
												"declarations": [
													{
														"constant": false,
														"id": 105,
														"mutability": "mutable",
														"name": "success",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 118,
														"src": "2310:12:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 104,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "2310:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"value": null,
														"visibility": "internal"
													},
													null
												],
												"id": 112,
												"initialValue": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"hexValue": "",
															"id": 110,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2360:2:1",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																	"typeString": "literal_string \"\""
																}
															],
															"expression": {
																"argumentTypes": null,
																"id": 106,
																"name": "recipient",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 88,
																"src": "2328:9:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"id": 107,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "call",
															"nodeType": "MemberAccess",
															"referencedDeclaration": null,
															"src": "2328:14:1",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 109,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"argumentTypes": null,
																"id": 108,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 90,
																"src": "2351:6:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "2328:31:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 111,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2328:35:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2309:54:1"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 114,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 105,
															"src": "2381:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564",
															"id": 115,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2390:60:1",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
																"typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
															},
															"value": "Address: unable to send value, recipient may have reverted"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
																"typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
															}
														],
														"id": 113,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "2373:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 116,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2373:78:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 117,
												"nodeType": "ExpressionStatement",
												"src": "2373:78:1"
											}
										]
									},
									"documentation": {
										"id": 86,
										"nodeType": "StructuredDocumentation",
										"src": "1156:906:1",
										"text": " @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."
									},
									"id": 119,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sendValue",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 91,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 88,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 119,
												"src": "2086:25:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												},
												"typeName": {
													"id": 87,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2086:15:1",
													"stateMutability": "payable",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 90,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 119,
												"src": "2113:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 89,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2113:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "2085:43:1"
									},
									"returnParameters": {
										"id": 92,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2138:0:1"
									},
									"scope": 309,
									"src": "2067:391:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 135,
										"nodeType": "Block",
										"src": "3288:82:1",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 130,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 122,
															"src": "3316:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"argumentTypes": null,
															"id": 131,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 124,
															"src": "3324:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564",
															"id": 132,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3330:32:1",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
																"typeString": "literal_string \"Address: low-level call failed\""
															},
															"value": "Address: low-level call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
																"typeString": "literal_string \"Address: low-level call failed\""
															}
														],
														"id": 129,
														"name": "functionCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															136,
															156
														],
														"referencedDeclaration": 156,
														"src": "3303:12:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
														}
													},
													"id": 133,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3303:60:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 128,
												"id": 134,
												"nodeType": "Return",
												"src": "3296:67:1"
											}
										]
									},
									"documentation": {
										"id": 120,
										"nodeType": "StructuredDocumentation",
										"src": "2464:730:1",
										"text": " @dev Performs a Solidity function call using a low level `call`. A\n plain`call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"
									},
									"id": 136,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 125,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 122,
												"mutability": "mutable",
												"name": "target",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 136,
												"src": "3221:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 121,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3221:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 124,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 136,
												"src": "3237:17:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 123,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3237:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "3220:35:1"
									},
									"returnParameters": {
										"id": 128,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 127,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 136,
												"src": "3274:12:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 126,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3274:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "3273:14:1"
									},
									"scope": 309,
									"src": "3199:171:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 155,
										"nodeType": "Block",
										"src": "3709:76:1",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 149,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 139,
															"src": "3748:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"argumentTypes": null,
															"id": 150,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 141,
															"src": "3756:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "30",
															"id": 151,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3762:1:1",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"argumentTypes": null,
															"id": 152,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 143,
															"src": "3765:12:1",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 148,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															176,
															226
														],
														"referencedDeclaration": 226,
														"src": "3726:21:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 153,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3726:52:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 147,
												"id": 154,
												"nodeType": "Return",
												"src": "3719:59:1"
											}
										]
									},
									"documentation": {
										"id": 137,
										"nodeType": "StructuredDocumentation",
										"src": "3376:211:1",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
									},
									"id": 156,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 144,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 139,
												"mutability": "mutable",
												"name": "target",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 156,
												"src": "3614:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 138,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3614:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 141,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 156,
												"src": "3630:17:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 140,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3630:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 143,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 156,
												"src": "3649:26:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 142,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3649:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "3613:63:1"
									},
									"returnParameters": {
										"id": 147,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 146,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 156,
												"src": "3695:12:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 145,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3695:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "3694:14:1"
									},
									"scope": 309,
									"src": "3592:193:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 175,
										"nodeType": "Block",
										"src": "4260:111:1",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 169,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 159,
															"src": "4299:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"argumentTypes": null,
															"id": 170,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 161,
															"src": "4307:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"argumentTypes": null,
															"id": 171,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 163,
															"src": "4313:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564",
															"id": 172,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4320:43:1",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
																"typeString": "literal_string \"Address: low-level call with value failed\""
															},
															"value": "Address: low-level call with value failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
																"typeString": "literal_string \"Address: low-level call with value failed\""
															}
														],
														"id": 168,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															176,
															226
														],
														"referencedDeclaration": 226,
														"src": "4277:21:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 173,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4277:87:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 167,
												"id": 174,
												"nodeType": "Return",
												"src": "4270:94:1"
											}
										]
									},
									"documentation": {
										"id": 157,
										"nodeType": "StructuredDocumentation",
										"src": "3791:351:1",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"
									},
									"id": 176,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 164,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 159,
												"mutability": "mutable",
												"name": "target",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 176,
												"src": "4178:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 158,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4178:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 161,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 176,
												"src": "4194:17:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 160,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4194:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 163,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 176,
												"src": "4213:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 162,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4213:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "4177:50:1"
									},
									"returnParameters": {
										"id": 167,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 166,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 176,
												"src": "4246:12:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 165,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4246:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "4245:14:1"
									},
									"scope": 309,
									"src": "4147:224:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 225,
										"nodeType": "Block",
										"src": "4760:382:1",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 197,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"expression": {
																	"argumentTypes": null,
																	"arguments": [
																		{
																			"argumentTypes": null,
																			"id": 193,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": -28,
																			"src": "4786:4:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_AddressUpgradeable_$309",
																				"typeString": "library AddressUpgradeable"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_AddressUpgradeable_$309",
																				"typeString": "library AddressUpgradeable"
																			}
																		],
																		"id": 192,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "4778:7:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 191,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "4778:7:1",
																			"typeDescriptions": {
																				"typeIdentifier": null,
																				"typeString": null
																			}
																		}
																	},
																	"id": 194,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "4778:13:1",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 195,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"referencedDeclaration": null,
																"src": "4778:21:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"argumentTypes": null,
																"id": 196,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 183,
																"src": "4803:5:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4778:30:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c",
															"id": 198,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4810:40:1",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																"typeString": "literal_string \"Address: insufficient balance for call\""
															},
															"value": "Address: insufficient balance for call"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																"typeString": "literal_string \"Address: insufficient balance for call\""
															}
														],
														"id": 190,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "4770:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 199,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4770:81:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 200,
												"nodeType": "ExpressionStatement",
												"src": "4770:81:1"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"arguments": [
																{
																	"argumentTypes": null,
																	"id": 203,
																	"name": "target",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 179,
																	"src": "4880:6:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 202,
																"name": "isContract",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 85,
																"src": "4869:10:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																	"typeString": "function (address) view returns (bool)"
																}
															},
															"id": 204,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4869:18:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374",
															"id": 205,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4889:31:1",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																"typeString": "literal_string \"Address: call to non-contract\""
															},
															"value": "Address: call to non-contract"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																"typeString": "literal_string \"Address: call to non-contract\""
															}
														],
														"id": 201,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "4861:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 206,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4861:60:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 207,
												"nodeType": "ExpressionStatement",
												"src": "4861:60:1"
											},
											{
												"assignments": [
													209,
													211
												],
												"declarations": [
													{
														"constant": false,
														"id": 209,
														"mutability": "mutable",
														"name": "success",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 225,
														"src": "4992:12:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 208,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "4992:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"value": null,
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 211,
														"mutability": "mutable",
														"name": "returndata",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 225,
														"src": "5006:23:1",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 210,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "5006:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 218,
												"initialValue": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 216,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 181,
															"src": "5061:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"expression": {
																"argumentTypes": null,
																"id": 212,
																"name": "target",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 179,
																"src": "5033:6:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 213,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "call",
															"nodeType": "MemberAccess",
															"referencedDeclaration": null,
															"src": "5033:11:1",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 215,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"argumentTypes": null,
																"id": 214,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 183,
																"src": "5053:5:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "5033:27:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 217,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5033:33:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4991:75:1"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 220,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 209,
															"src": "5101:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"id": 221,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 211,
															"src": "5110:10:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"argumentTypes": null,
															"id": 222,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 185,
															"src": "5122:12:1",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 219,
														"name": "_verifyCallResult",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 308,
														"src": "5083:17:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (bool,bytes memory,string memory) pure returns (bytes memory)"
														}
													},
													"id": 223,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5083:52:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 189,
												"id": 224,
												"nodeType": "Return",
												"src": "5076:59:1"
											}
										]
									},
									"documentation": {
										"id": 177,
										"nodeType": "StructuredDocumentation",
										"src": "4377:237:1",
										"text": " @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
									},
									"id": 226,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 186,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 179,
												"mutability": "mutable",
												"name": "target",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 226,
												"src": "4650:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 178,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4650:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 181,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 226,
												"src": "4666:17:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 180,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4666:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 183,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 226,
												"src": "4685:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 182,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4685:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 185,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 226,
												"src": "4700:26:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 184,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "4700:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "4649:78:1"
									},
									"returnParameters": {
										"id": 189,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 188,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 226,
												"src": "4746:12:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 187,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4746:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "4745:14:1"
									},
									"scope": 309,
									"src": "4619:523:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 242,
										"nodeType": "Block",
										"src": "5419:97:1",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 237,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 229,
															"src": "5455:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"argumentTypes": null,
															"id": 238,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 231,
															"src": "5463:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564",
															"id": 239,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5469:39:1",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
																"typeString": "literal_string \"Address: low-level static call failed\""
															},
															"value": "Address: low-level static call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
																"typeString": "literal_string \"Address: low-level static call failed\""
															}
														],
														"id": 236,
														"name": "functionStaticCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															243,
															278
														],
														"referencedDeclaration": 278,
														"src": "5436:18:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 240,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5436:73:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 235,
												"id": 241,
												"nodeType": "Return",
												"src": "5429:80:1"
											}
										]
									},
									"documentation": {
										"id": 227,
										"nodeType": "StructuredDocumentation",
										"src": "5148:166:1",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
									},
									"id": 243,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 232,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 229,
												"mutability": "mutable",
												"name": "target",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 243,
												"src": "5347:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 228,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5347:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 231,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 243,
												"src": "5363:17:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 230,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5363:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "5346:35:1"
									},
									"returnParameters": {
										"id": 235,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 234,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 243,
												"src": "5405:12:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 233,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5405:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "5404:14:1"
									},
									"scope": 309,
									"src": "5319:197:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 277,
										"nodeType": "Block",
										"src": "5828:288:1",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"arguments": [
																{
																	"argumentTypes": null,
																	"id": 257,
																	"name": "target",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 246,
																	"src": "5857:6:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 256,
																"name": "isContract",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 85,
																"src": "5846:10:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																	"typeString": "function (address) view returns (bool)"
																}
															},
															"id": 258,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5846:18:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "416464726573733a207374617469632063616c6c20746f206e6f6e2d636f6e7472616374",
															"id": 259,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5866:38:1",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c79cc78e4f16ce3933a42b84c73868f93bb4a59c031a0acf576679de98c608a9",
																"typeString": "literal_string \"Address: static call to non-contract\""
															},
															"value": "Address: static call to non-contract"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_c79cc78e4f16ce3933a42b84c73868f93bb4a59c031a0acf576679de98c608a9",
																"typeString": "literal_string \"Address: static call to non-contract\""
															}
														],
														"id": 255,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "5838:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 260,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5838:67:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 261,
												"nodeType": "ExpressionStatement",
												"src": "5838:67:1"
											},
											{
												"assignments": [
													263,
													265
												],
												"declarations": [
													{
														"constant": false,
														"id": 263,
														"mutability": "mutable",
														"name": "success",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 277,
														"src": "5976:12:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 262,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "5976:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"value": null,
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 265,
														"mutability": "mutable",
														"name": "returndata",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 277,
														"src": "5990:23:1",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 264,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "5990:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 270,
												"initialValue": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 268,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 248,
															"src": "6035:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"argumentTypes": null,
															"id": 266,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 246,
															"src": "6017:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 267,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "staticcall",
														"nodeType": "MemberAccess",
														"referencedDeclaration": null,
														"src": "6017:17:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) view returns (bool,bytes memory)"
														}
													},
													"id": 269,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6017:23:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5975:65:1"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 272,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 263,
															"src": "6075:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"id": 273,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 265,
															"src": "6084:10:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"argumentTypes": null,
															"id": 274,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 250,
															"src": "6096:12:1",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 271,
														"name": "_verifyCallResult",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 308,
														"src": "6057:17:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (bool,bytes memory,string memory) pure returns (bytes memory)"
														}
													},
													"id": 275,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6057:52:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 254,
												"id": 276,
												"nodeType": "Return",
												"src": "6050:59:1"
											}
										]
									},
									"documentation": {
										"id": 244,
										"nodeType": "StructuredDocumentation",
										"src": "5522:173:1",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
									},
									"id": 278,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 251,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 246,
												"mutability": "mutable",
												"name": "target",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 278,
												"src": "5728:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 245,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5728:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 248,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 278,
												"src": "5744:17:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 247,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5744:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 250,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 278,
												"src": "5763:26:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 249,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5763:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "5727:63:1"
									},
									"returnParameters": {
										"id": 254,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 253,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 278,
												"src": "5814:12:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 252,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5814:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "5813:14:1"
									},
									"scope": 309,
									"src": "5700:416:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 307,
										"nodeType": "Block",
										"src": "6251:596:1",
										"statements": [
											{
												"condition": {
													"argumentTypes": null,
													"id": 289,
													"name": "success",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 280,
													"src": "6265:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 305,
													"nodeType": "Block",
													"src": "6322:519:1",
													"statements": [
														{
															"condition": {
																"argumentTypes": null,
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 296,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"argumentTypes": null,
																	"expression": {
																		"argumentTypes": null,
																		"id": 293,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 282,
																		"src": "6406:10:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 294,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "length",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": null,
																	"src": "6406:17:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">",
																"rightExpression": {
																	"argumentTypes": null,
																	"hexValue": "30",
																	"id": 295,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "6426:1:1",
																	"subdenomination": null,
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "6406:21:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"falseBody": {
																"id": 303,
																"nodeType": "Block",
																"src": "6778:53:1",
																"statements": [
																	{
																		"expression": {
																			"argumentTypes": null,
																			"arguments": [
																				{
																					"argumentTypes": null,
																					"id": 300,
																					"name": "errorMessage",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 284,
																					"src": "6803:12:1",
																					"typeDescriptions": {
																						"typeIdentifier": "t_string_memory_ptr",
																						"typeString": "string memory"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_string_memory_ptr",
																						"typeString": "string memory"
																					}
																				],
																				"id": 299,
																				"name": "revert",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [
																					-19,
																					-19
																				],
																				"referencedDeclaration": -19,
																				"src": "6796:6:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																					"typeString": "function (string memory) pure"
																				}
																			},
																			"id": 301,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "6796:20:1",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 302,
																		"nodeType": "ExpressionStatement",
																		"src": "6796:20:1"
																	}
																]
															},
															"id": 304,
															"nodeType": "IfStatement",
															"src": "6402:429:1",
															"trueBody": {
																"id": 298,
																"nodeType": "Block",
																"src": "6429:343:1",
																"statements": [
																	{
																		"AST": {
																			"nodeType": "YulBlock",
																			"src": "6613:145:1",
																			"statements": [
																				{
																					"nodeType": "YulVariableDeclaration",
																					"src": "6635:40:1",
																					"value": {
																						"arguments": [
																							{
																								"name": "returndata",
																								"nodeType": "YulIdentifier",
																								"src": "6664:10:1"
																							}
																						],
																						"functionName": {
																							"name": "mload",
																							"nodeType": "YulIdentifier",
																							"src": "6658:5:1"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "6658:17:1"
																					},
																					"variables": [
																						{
																							"name": "returndata_size",
																							"nodeType": "YulTypedName",
																							"src": "6639:15:1",
																							"type": ""
																						}
																					]
																				},
																				{
																					"expression": {
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "6707:2:1",
																										"type": "",
																										"value": "32"
																									},
																									{
																										"name": "returndata",
																										"nodeType": "YulIdentifier",
																										"src": "6711:10:1"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "6703:3:1"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "6703:19:1"
																							},
																							{
																								"name": "returndata_size",
																								"nodeType": "YulIdentifier",
																								"src": "6724:15:1"
																							}
																						],
																						"functionName": {
																							"name": "revert",
																							"nodeType": "YulIdentifier",
																							"src": "6696:6:1"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "6696:44:1"
																					},
																					"nodeType": "YulExpressionStatement",
																					"src": "6696:44:1"
																				}
																			]
																		},
																		"evmVersion": "istanbul",
																		"externalReferences": [
																			{
																				"declaration": 282,
																				"isOffset": false,
																				"isSlot": false,
																				"src": "6664:10:1",
																				"valueSize": 1
																			},
																			{
																				"declaration": 282,
																				"isOffset": false,
																				"isSlot": false,
																				"src": "6711:10:1",
																				"valueSize": 1
																			}
																		],
																		"id": 297,
																		"nodeType": "InlineAssembly",
																		"src": "6604:154:1"
																	}
																]
															}
														}
													]
												},
												"id": 306,
												"nodeType": "IfStatement",
												"src": "6261:580:1",
												"trueBody": {
													"id": 292,
													"nodeType": "Block",
													"src": "6274:42:1",
													"statements": [
														{
															"expression": {
																"argumentTypes": null,
																"id": 290,
																"name": "returndata",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 282,
																"src": "6295:10:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"functionReturnParameters": 288,
															"id": 291,
															"nodeType": "Return",
															"src": "6288:17:1"
														}
													]
												}
											}
										]
									},
									"documentation": null,
									"id": 308,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_verifyCallResult",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 285,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 280,
												"mutability": "mutable",
												"name": "success",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 308,
												"src": "6149:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 279,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6149:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 282,
												"mutability": "mutable",
												"name": "returndata",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 308,
												"src": "6163:23:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 281,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6163:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 284,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 308,
												"src": "6188:26:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 283,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6188:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "6148:67:1"
									},
									"returnParameters": {
										"id": 288,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 287,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 308,
												"src": "6237:12:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 286,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6237:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "6236:14:1"
									},
									"scope": 309,
									"src": "6122:725:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 310,
							"src": "134:6715:1"
						}
					],
					"src": "33:6817:1"
				},
				"id": 1
			},
			"contracts/multiAccessUpgradeable.sol": {
				"ast": {
					"absolutePath": "contracts/multiAccessUpgradeable.sol",
					"exportedSymbols": {
						"MultiAccessUpgradeable": [
							373
						]
					},
					"id": 374,
					"license": null,
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 311,
							"literals": [
								"solidity",
								"^",
								"0.6",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "0:23:2"
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol",
							"file": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol",
							"id": 312,
							"nodeType": "ImportDirective",
							"scope": 374,
							"sourceUnit": 66,
							"src": "25:69:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"arguments": null,
									"baseName": {
										"contractScope": null,
										"id": 313,
										"name": "Initializable",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 65,
										"src": "131:13:2",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_Initializable_$65",
											"typeString": "contract Initializable"
										}
									},
									"id": 314,
									"nodeType": "InheritanceSpecifier",
									"src": "131:13:2"
								}
							],
							"contractDependencies": [
								65
							],
							"contractKind": "contract",
							"documentation": null,
							"fullyImplemented": true,
							"id": 373,
							"linearizedBaseContracts": [
								373,
								65
							],
							"name": "MultiAccessUpgradeable",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 318,
									"mutability": "mutable",
									"name": "access",
									"nodeType": "VariableDeclaration",
									"overrides": null,
									"scope": 373,
									"src": "210:39:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
										"typeString": "mapping(address => bool)"
									},
									"typeName": {
										"id": 317,
										"keyType": {
											"id": 315,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "218:7:2",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "210:24:2",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
											"typeString": "mapping(address => bool)"
										},
										"valueType": {
											"id": 316,
											"name": "bool",
											"nodeType": "ElementaryTypeName",
											"src": "229:4:2",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											}
										}
									},
									"value": null,
									"visibility": "private"
								},
								{
									"body": {
										"id": 330,
										"nodeType": "Block",
										"src": "297:42:2",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"id": 328,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"baseExpression": {
															"argumentTypes": null,
															"id": 323,
															"name": "access",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 318,
															"src": "307:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																"typeString": "mapping(address => bool)"
															}
														},
														"id": 326,
														"indexExpression": {
															"argumentTypes": null,
															"expression": {
																"argumentTypes": null,
																"id": 324,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": -15,
																"src": "314:3:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 325,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"referencedDeclaration": null,
															"src": "314:10:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "307:18:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"hexValue": "74727565",
														"id": 327,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "328:4:2",
														"subdenomination": null,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "true"
													},
													"src": "307:25:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 329,
												"nodeType": "ExpressionStatement",
												"src": "307:25:2"
											}
										]
									},
									"documentation": null,
									"functionSelector": "8129fc1c",
									"id": 331,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"arguments": null,
											"id": 321,
											"modifierName": {
												"argumentTypes": null,
												"id": 320,
												"name": "initializer",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 48,
												"src": "285:11:2",
												"typeDescriptions": {
													"typeIdentifier": "t_modifier$__$",
													"typeString": "modifier ()"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "285:11:2"
										}
									],
									"name": "initialize",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 319,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "275:2:2"
									},
									"returnParameters": {
										"id": 322,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "297:0:2"
									},
									"scope": 373,
									"src": "256:83:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 344,
										"nodeType": "Block",
										"src": "396:34:2",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"id": 342,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"baseExpression": {
															"argumentTypes": null,
															"id": 338,
															"name": "access",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 318,
															"src": "406:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																"typeString": "mapping(address => bool)"
															}
														},
														"id": 340,
														"indexExpression": {
															"argumentTypes": null,
															"id": 339,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 333,
															"src": "413:2:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "406:10:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"hexValue": "74727565",
														"id": 341,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "419:4:2",
														"subdenomination": null,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "true"
													},
													"src": "406:17:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 343,
												"nodeType": "ExpressionStatement",
												"src": "406:17:2"
											}
										]
									},
									"documentation": null,
									"functionSelector": "0ae5e739",
									"id": 345,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"arguments": null,
											"id": 336,
											"modifierName": {
												"argumentTypes": null,
												"id": 335,
												"name": "restricted",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 372,
												"src": "385:10:2",
												"typeDescriptions": {
													"typeIdentifier": "t_modifier$__$",
													"typeString": "modifier ()"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "385:10:2"
										}
									],
									"name": "grantAccess",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 334,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 333,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 345,
												"src": "366:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 332,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "366:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "365:12:2"
									},
									"returnParameters": {
										"id": 337,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "396:0:2"
									},
									"scope": 373,
									"src": "345:85:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 357,
										"nodeType": "Block",
										"src": "490:36:2",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"id": 355,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "delete",
													"prefix": true,
													"src": "500:19:2",
													"subExpression": {
														"argumentTypes": null,
														"baseExpression": {
															"argumentTypes": null,
															"id": 352,
															"name": "access",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 318,
															"src": "507:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																"typeString": "mapping(address => bool)"
															}
														},
														"id": 354,
														"indexExpression": {
															"argumentTypes": null,
															"id": 353,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 347,
															"src": "514:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "507:12:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 356,
												"nodeType": "ExpressionStatement",
												"src": "500:19:2"
											}
										]
									},
									"documentation": null,
									"functionSelector": "85e68531",
									"id": 358,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"arguments": null,
											"id": 350,
											"modifierName": {
												"argumentTypes": null,
												"id": 349,
												"name": "restricted",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 372,
												"src": "479:10:2",
												"typeDescriptions": {
													"typeIdentifier": "t_modifier$__$",
													"typeString": "modifier ()"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "479:10:2"
										}
									],
									"name": "revokeAccess",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 348,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 347,
												"mutability": "mutable",
												"name": "from",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 358,
												"src": "458:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 346,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "458:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "457:14:2"
									},
									"returnParameters": {
										"id": 351,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "490:0:2"
									},
									"scope": 373,
									"src": "436:90:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 371,
										"nodeType": "Block",
										"src": "554:80:2",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 366,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"baseExpression": {
																	"argumentTypes": null,
																	"id": 361,
																	"name": "access",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 318,
																	"src": "572:6:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																		"typeString": "mapping(address => bool)"
																	}
																},
																"id": 364,
																"indexExpression": {
																	"argumentTypes": null,
																	"expression": {
																		"argumentTypes": null,
																		"id": 362,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": -15,
																		"src": "579:3:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 363,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": null,
																	"src": "579:10:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address_payable",
																		"typeString": "address payable"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "572:18:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"argumentTypes": null,
																"hexValue": "74727565",
																"id": 365,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "594:4:2",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "true"
															},
															"src": "572:26:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "4163636573732064656e696564",
															"id": 367,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "600:15:2",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_e3b095ce8a187ba18763b60884a0b2572625313b25caa4e4b1731b365d9f46da",
																"typeString": "literal_string \"Access denied\""
															},
															"value": "Access denied"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_e3b095ce8a187ba18763b60884a0b2572625313b25caa4e4b1731b365d9f46da",
																"typeString": "literal_string \"Access denied\""
															}
														],
														"id": 360,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "564:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 368,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "564:52:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 369,
												"nodeType": "ExpressionStatement",
												"src": "564:52:2"
											},
											{
												"id": 370,
												"nodeType": "PlaceholderStatement",
												"src": "626:1:2"
											}
										]
									},
									"documentation": null,
									"id": 372,
									"name": "restricted",
									"nodeType": "ModifierDefinition",
									"overrides": null,
									"parameters": {
										"id": 359,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "551:2:2"
									},
									"src": "532:102:2",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 374,
							"src": "96:541:2"
						}
					],
					"src": "0:637:2"
				},
				"id": 2
			}
		}
	}
}